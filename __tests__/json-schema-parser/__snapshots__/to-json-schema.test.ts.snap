// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toJsonSchema should copy the properties from metadata 1`] = `
{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "properties": {
    "date": {
      "format": "date-time",
      "type": "string",
    },
    "dictionary": {
      "description": "This field is optional.",
      "properties": {
        "foo": {},
      },
      "required": [
        "foo",
      ],
      "type": "object",
    },
    "list": {
      "description": "This is a list of strings",
      "items": [
        {
          "type": "string",
        },
      ],
      "title": "List of strings",
      "type": "array",
    },
    "timestamp": {
      "description": "UNIX timestamp.",
      "title": "Creation Timestamp",
      "type": "integer",
    },
  },
  "required": [
    "date",
    "timestamp",
    "list",
  ],
  "title": "Top Record",
  "type": "object",
}
`;

exports[`toJsonSchema should parse to a valid JSONSchema when set to 'omit' 1`] = `
{
  "properties": {
    "bMember": {
      "enum": [
        "B",
      ],
      "type": "string",
    },
    "bool": {
      "type": "boolean",
    },
    "dict": {
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string",
          },
        ],
      },
      "type": "object",
    },
    "enum": {
      "anyOf": [
        {
          "enum": [
            "A",
          ],
          "title": "A",
          "type": "string",
        },
        {
          "enum": [
            "B",
          ],
          "title": "B",
          "type": "string",
        },
        {
          "enum": [
            "C",
          ],
          "title": "C",
          "type": "string",
        },
      ],
    },
    "literalBoolean": {
      "enum": [
        true,
      ],
      "type": "boolean",
    },
    "literalNumber": {
      "enum": [
        1,
      ],
      "type": "number",
    },
    "literalString": {
      "enum": [
        "literal",
      ],
      "type": "string",
    },
    "number": {
      "type": "number",
    },
    "oneof": {
      "anyOf": [
        {
          "properties": {
            "foo": {
              "type": "string",
            },
          },
          "required": [
            "foo",
          ],
          "type": "object",
        },
        {
          "properties": {
            "bar": {
              "type": "string",
            },
          },
          "required": [
            "bar",
          ],
          "type": "object",
        },
      ],
    },
    "optionalSelfCopy": {
      "properties": {
        "bMember": {
          "enum": [
            "B",
          ],
          "type": "string",
        },
        "bool": {
          "type": "boolean",
        },
        "dict": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
              },
            ],
          },
          "type": "object",
        },
        "enum": {
          "anyOf": [
            {
              "enum": [
                "A",
              ],
              "title": "A",
              "type": "string",
            },
            {
              "enum": [
                "B",
              ],
              "title": "B",
              "type": "string",
            },
            {
              "enum": [
                "C",
              ],
              "title": "C",
              "type": "string",
            },
          ],
        },
        "id": {
          "type": "string",
        },
        "literalBoolean": {
          "enum": [
            true,
          ],
          "type": "boolean",
        },
        "literalNumber": {
          "enum": [
            1,
          ],
          "type": "number",
        },
        "literalString": {
          "enum": [
            "literal",
          ],
          "type": "string",
        },
        "number": {
          "type": "number",
        },
        "oneof": {
          "anyOf": [
            {
              "properties": {
                "foo": {
                  "type": "string",
                },
              },
              "required": [
                "foo",
              ],
              "type": "object",
            },
            {
              "properties": {
                "bar": {
                  "type": "string",
                },
              },
              "required": [
                "bar",
              ],
              "type": "object",
            },
          ],
        },
        "recordIntersection": {
          "allOf": [
            {
              "properties": {
                "a": {
                  "type": "string",
                },
              },
              "required": [
                "a",
              ],
              "type": "object",
            },
            {
              "properties": {
                "b": {
                  "type": "number",
                },
              },
              "required": [
                "b",
              ],
              "type": "object",
            },
          ],
        },
        "stringArray": {
          "items": [
            {
              "type": "string",
            },
          ],
          "type": "array",
        },
        "stringMatching": {
          "pattern": "foo.+[0-9]$",
          "patternFlags": "gi",
          "type": "string",
        },
        "tuple": {
          "items": [
            {
              "properties": {
                "id": {
                  "type": "string",
                },
              },
              "required": [],
              "type": "object",
            },
            {
              "enum": [
                "separator",
              ],
              "type": "string",
            },
            {
              "type": "boolean",
            },
          ],
          "maxItems": 3,
          "minItems": 3,
          "required": [
            "0",
            "1",
            "2",
          ],
          "type": "array",
        },
        "unionArray": {
          "items": [
            {
              "properties": {
                "foo": {
                  "type": "string",
                },
              },
              "required": [
                "foo",
              ],
              "type": "object",
            },
            {
              "properties": {
                "bar": {
                  "type": "string",
                },
              },
              "required": [
                "bar",
              ],
              "type": "object",
            },
          ],
          "type": "array",
        },
      },
      "required": [],
      "type": "object",
    },
    "recordIntersection": {
      "allOf": [
        {
          "properties": {
            "a": {
              "type": "string",
            },
          },
          "required": [
            "a",
          ],
          "type": "object",
        },
        {
          "properties": {
            "b": {
              "type": "number",
            },
          },
          "required": [
            "b",
          ],
          "type": "object",
        },
      ],
    },
    "stringArray": {
      "items": [
        {
          "type": "string",
        },
      ],
      "type": "array",
    },
    "stringMatching": {
      "pattern": "^foo$",
      "type": "string",
    },
    "tuple": {
      "items": [
        {
          "type": "string",
        },
        {
          "type": "number",
        },
      ],
      "maxItems": 2,
      "minItems": 2,
      "required": [
        "0",
        "1",
      ],
      "type": "array",
    },
    "unionArray": {
      "items": [
        {
          "properties": {
            "foo": {
              "type": "string",
            },
          },
          "required": [
            "foo",
          ],
          "type": "object",
        },
        {
          "properties": {
            "bar": {
              "type": "string",
            },
          },
          "required": [
            "bar",
          ],
          "type": "object",
        },
      ],
      "type": "array",
    },
    "uuid": {
      "type": "string",
    },
  },
  "required": [
    "uuid",
    "number",
    "bool",
    "stringArray",
    "unionArray",
    "tuple",
    "literalString",
    "literalNumber",
    "literalBoolean",
    "enum",
    "bMember",
    "recordIntersection",
    "dict",
    "oneof",
    "stringMatching",
  ],
  "type": "object",
}
`;

exports[`toJsonSchema should parse to a valid JSONSchema when set to 'set-as-any' 1`] = `
{
  "properties": {
    "bMember": {
      "enum": [
        "B",
      ],
      "type": "string",
    },
    "bool": {
      "type": "boolean",
    },
    "customValidator": {
      "title": "Custom Validator (anonymous)",
    },
    "dict": {
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string",
          },
        ],
      },
      "type": "object",
    },
    "enum": {
      "anyOf": [
        {
          "enum": [
            "A",
          ],
          "title": "A",
          "type": "string",
        },
        {
          "enum": [
            "B",
          ],
          "title": "B",
          "type": "string",
        },
        {
          "enum": [
            "C",
          ],
          "title": "C",
          "type": "string",
        },
      ],
    },
    "literalBoolean": {
      "enum": [
        true,
      ],
      "type": "boolean",
    },
    "literalNumber": {
      "enum": [
        1,
      ],
      "type": "number",
    },
    "literalString": {
      "enum": [
        "literal",
      ],
      "type": "string",
    },
    "number": {
      "type": "number",
    },
    "oneof": {
      "anyOf": [
        {
          "properties": {
            "foo": {
              "type": "string",
            },
          },
          "required": [
            "foo",
          ],
          "type": "object",
        },
        {
          "properties": {
            "bar": {
              "type": "string",
            },
          },
          "required": [
            "bar",
          ],
          "type": "object",
        },
      ],
    },
    "optionalSelfCopy": {
      "properties": {
        "bMember": {
          "enum": [
            "B",
          ],
          "type": "string",
        },
        "bool": {
          "type": "boolean",
        },
        "dict": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
              },
            ],
          },
          "type": "object",
        },
        "enum": {
          "anyOf": [
            {
              "enum": [
                "A",
              ],
              "title": "A",
              "type": "string",
            },
            {
              "enum": [
                "B",
              ],
              "title": "B",
              "type": "string",
            },
            {
              "enum": [
                "C",
              ],
              "title": "C",
              "type": "string",
            },
          ],
        },
        "id": {
          "type": "string",
        },
        "literalBoolean": {
          "enum": [
            true,
          ],
          "type": "boolean",
        },
        "literalNumber": {
          "enum": [
            1,
          ],
          "type": "number",
        },
        "literalString": {
          "enum": [
            "literal",
          ],
          "type": "string",
        },
        "number": {
          "type": "number",
        },
        "oneof": {
          "anyOf": [
            {
              "properties": {
                "foo": {
                  "type": "string",
                },
              },
              "required": [
                "foo",
              ],
              "type": "object",
            },
            {
              "properties": {
                "bar": {
                  "type": "string",
                },
              },
              "required": [
                "bar",
              ],
              "type": "object",
            },
          ],
        },
        "recordIntersection": {
          "allOf": [
            {
              "properties": {
                "a": {
                  "type": "string",
                },
              },
              "required": [
                "a",
              ],
              "type": "object",
            },
            {
              "properties": {
                "b": {
                  "type": "number",
                },
              },
              "required": [
                "b",
              ],
              "type": "object",
            },
          ],
        },
        "stringArray": {
          "items": [
            {
              "type": "string",
            },
          ],
          "type": "array",
        },
        "stringMatching": {
          "pattern": "foo.+[0-9]$",
          "patternFlags": "gi",
          "type": "string",
        },
        "stringSet": {
          "title": "Set",
        },
        "tuple": {
          "items": [
            {
              "properties": {
                "id": {
                  "type": "string",
                },
              },
              "required": [],
              "type": "object",
            },
            {
              "enum": [
                "separator",
              ],
              "type": "string",
            },
            {
              "type": "boolean",
            },
          ],
          "maxItems": 3,
          "minItems": 3,
          "required": [
            "0",
            "1",
            "2",
          ],
          "type": "array",
        },
        "unionArray": {
          "items": [
            {
              "properties": {
                "foo": {
                  "type": "string",
                },
              },
              "required": [
                "foo",
              ],
              "type": "object",
            },
            {
              "properties": {
                "bar": {
                  "type": "string",
                },
              },
              "required": [
                "bar",
              ],
              "type": "object",
            },
          ],
          "type": "array",
        },
      },
      "required": [],
      "type": "object",
    },
    "recordIntersection": {
      "allOf": [
        {
          "properties": {
            "a": {
              "type": "string",
            },
          },
          "required": [
            "a",
          ],
          "type": "object",
        },
        {
          "properties": {
            "b": {
              "type": "number",
            },
          },
          "required": [
            "b",
          ],
          "type": "object",
        },
      ],
    },
    "stringArray": {
      "items": [
        {
          "type": "string",
        },
      ],
      "type": "array",
    },
    "stringMatching": {
      "pattern": "^foo$",
      "type": "string",
    },
    "stringSet": {
      "title": "Set",
    },
    "symbol": {
      "title": "Symbol",
    },
    "tuple": {
      "items": [
        {
          "type": "string",
        },
        {
          "type": "number",
        },
      ],
      "maxItems": 2,
      "minItems": 2,
      "required": [
        "0",
        "1",
      ],
      "type": "array",
    },
    "undef": {
      "title": "undefined",
    },
    "unionArray": {
      "items": [
        {
          "properties": {
            "foo": {
              "type": "string",
            },
          },
          "required": [
            "foo",
          ],
          "type": "object",
        },
        {
          "properties": {
            "bar": {
              "type": "string",
            },
          },
          "required": [
            "bar",
          ],
          "type": "object",
        },
      ],
      "type": "array",
    },
    "uuid": {
      "type": "string",
    },
  },
  "required": [
    "uuid",
    "number",
    "bool",
    "stringSet",
    "stringArray",
    "unionArray",
    "tuple",
    "literalString",
    "literalNumber",
    "literalBoolean",
    "enum",
    "bMember",
    "recordIntersection",
    "dict",
    "oneof",
    "symbol",
    "undef",
    "customValidator",
    "stringMatching",
  ],
  "type": "object",
}
`;

exports[`toJsonSchema should set the specified additionalProperty 1`] = `
{
  "additionalProperties": false,
  "properties": {
    "bMember": {
      "enum": [
        "B",
      ],
      "type": "string",
    },
    "bool": {
      "type": "boolean",
    },
    "dict": {
      "additionalProperties": {
        "anyOf": [
          {
            "type": "string",
          },
        ],
      },
      "type": "object",
    },
    "enum": {
      "anyOf": [
        {
          "enum": [
            "A",
          ],
          "title": "A",
          "type": "string",
        },
        {
          "enum": [
            "B",
          ],
          "title": "B",
          "type": "string",
        },
        {
          "enum": [
            "C",
          ],
          "title": "C",
          "type": "string",
        },
      ],
    },
    "literalBoolean": {
      "enum": [
        true,
      ],
      "type": "boolean",
    },
    "literalNumber": {
      "enum": [
        1,
      ],
      "type": "number",
    },
    "literalString": {
      "enum": [
        "literal",
      ],
      "type": "string",
    },
    "number": {
      "type": "number",
    },
    "oneof": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "foo": {
              "type": "string",
            },
          },
          "required": [
            "foo",
          ],
          "type": "object",
        },
        {
          "additionalProperties": false,
          "properties": {
            "bar": {
              "type": "string",
            },
          },
          "required": [
            "bar",
          ],
          "type": "object",
        },
      ],
    },
    "optionalSelfCopy": {
      "additionalProperties": false,
      "properties": {
        "bMember": {
          "enum": [
            "B",
          ],
          "type": "string",
        },
        "bool": {
          "type": "boolean",
        },
        "dict": {
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
              },
            ],
          },
          "type": "object",
        },
        "enum": {
          "anyOf": [
            {
              "enum": [
                "A",
              ],
              "title": "A",
              "type": "string",
            },
            {
              "enum": [
                "B",
              ],
              "title": "B",
              "type": "string",
            },
            {
              "enum": [
                "C",
              ],
              "title": "C",
              "type": "string",
            },
          ],
        },
        "id": {
          "type": "string",
        },
        "literalBoolean": {
          "enum": [
            true,
          ],
          "type": "boolean",
        },
        "literalNumber": {
          "enum": [
            1,
          ],
          "type": "number",
        },
        "literalString": {
          "enum": [
            "literal",
          ],
          "type": "string",
        },
        "number": {
          "type": "number",
        },
        "oneof": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "foo": {
                  "type": "string",
                },
              },
              "required": [
                "foo",
              ],
              "type": "object",
            },
            {
              "additionalProperties": false,
              "properties": {
                "bar": {
                  "type": "string",
                },
              },
              "required": [
                "bar",
              ],
              "type": "object",
            },
          ],
        },
        "recordIntersection": {
          "allOf": [
            {
              "additionalProperties": false,
              "properties": {
                "a": {
                  "type": "string",
                },
              },
              "required": [
                "a",
              ],
              "type": "object",
            },
            {
              "additionalProperties": false,
              "properties": {
                "b": {
                  "type": "number",
                },
              },
              "required": [
                "b",
              ],
              "type": "object",
            },
          ],
        },
        "stringArray": {
          "items": [
            {
              "type": "string",
            },
          ],
          "type": "array",
        },
        "stringMatching": {
          "pattern": "foo.+[0-9]$",
          "patternFlags": "gi",
          "type": "string",
        },
        "tuple": {
          "items": [
            {
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                },
              },
              "required": [],
              "type": "object",
            },
            {
              "enum": [
                "separator",
              ],
              "type": "string",
            },
            {
              "type": "boolean",
            },
          ],
          "maxItems": 3,
          "minItems": 3,
          "required": [
            "0",
            "1",
            "2",
          ],
          "type": "array",
        },
        "unionArray": {
          "items": [
            {
              "additionalProperties": false,
              "properties": {
                "foo": {
                  "type": "string",
                },
              },
              "required": [
                "foo",
              ],
              "type": "object",
            },
            {
              "additionalProperties": false,
              "properties": {
                "bar": {
                  "type": "string",
                },
              },
              "required": [
                "bar",
              ],
              "type": "object",
            },
          ],
          "type": "array",
        },
      },
      "required": [],
      "type": "object",
    },
    "recordIntersection": {
      "allOf": [
        {
          "additionalProperties": false,
          "properties": {
            "a": {
              "type": "string",
            },
          },
          "required": [
            "a",
          ],
          "type": "object",
        },
        {
          "additionalProperties": false,
          "properties": {
            "b": {
              "type": "number",
            },
          },
          "required": [
            "b",
          ],
          "type": "object",
        },
      ],
    },
    "stringArray": {
      "items": [
        {
          "type": "string",
        },
      ],
      "type": "array",
    },
    "stringMatching": {
      "pattern": "^foo$",
      "type": "string",
    },
    "tuple": {
      "items": [
        {
          "type": "string",
        },
        {
          "type": "number",
        },
      ],
      "maxItems": 2,
      "minItems": 2,
      "required": [
        "0",
        "1",
      ],
      "type": "array",
    },
    "unionArray": {
      "items": [
        {
          "additionalProperties": false,
          "properties": {
            "foo": {
              "type": "string",
            },
          },
          "required": [
            "foo",
          ],
          "type": "object",
        },
        {
          "additionalProperties": false,
          "properties": {
            "bar": {
              "type": "string",
            },
          },
          "required": [
            "bar",
          ],
          "type": "object",
        },
      ],
      "type": "array",
    },
    "uuid": {
      "type": "string",
    },
  },
  "required": [
    "uuid",
    "number",
    "bool",
    "stringArray",
    "unionArray",
    "tuple",
    "literalString",
    "literalNumber",
    "literalBoolean",
    "enum",
    "bMember",
    "recordIntersection",
    "dict",
    "oneof",
    "stringMatching",
  ],
  "type": "object",
}
`;

exports[`toJsonSchema should use the custom parsers 1`] = `
{
  "properties": {
    "custom": {
      "title": "Custom parser schema for validateFunction",
    },
    "function": {
      "title": "Custom parser schema for Function DataType",
    },
    "set": {
      "title": "Custom parser schema for Set DataType",
    },
    "symbol": {
      "title": "Custom parser schema for Symbol DataType",
    },
    "undefined": {
      "title": "Custom parser schema for Undefined DataType",
    },
  },
  "required": [
    "custom",
    "function",
    "set",
    "symbol",
    "undefined",
  ],
  "type": "object",
}
`;

exports[`toJsonSchema should work correctly with circular type deeply nested circular types 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/RecordType",
    },
  ],
  "definitions": {
    "ArrayType": {
      "items": [
        {
          "$ref": "#/definitions/RecordType",
        },
        {
          "properties": {
            "items": {
              "$ref": "#/definitions/ArrayType",
            },
            "nested": {
              "enum": [
                true,
              ],
              "type": "boolean",
            },
          },
          "required": [
            "nested",
            "items",
          ],
          "type": "object",
        },
      ],
      "type": "array",
    },
    "RecordType": {
      "properties": {
        "children": {
          "allOf": [
            {
              "$ref": "#/definitions/ArrayType",
            },
          ],
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "children",
      ],
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type deeply nested structure 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/Node",
    },
  ],
  "definitions": {
    "Node": {
      "properties": {
        "children": {
          "properties": {
            "container": {
              "properties": {
                "children": {
                  "items": [
                    {
                      "$ref": "#/definitions/Node",
                    },
                  ],
                  "type": "array",
                },
                "name": {
                  "type": "string",
                },
              },
              "required": [
                "name",
                "children",
              ],
              "type": "object",
            },
            "type": {
              "type": "string",
            },
          },
          "required": [
            "type",
            "container",
          ],
          "type": "object",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "children",
      ],
      "title": "Node",
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type deeply nested structure of named types 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/Node",
    },
  ],
  "definitions": {
    "Node": {
      "properties": {
        "children": {
          "items": [
            {
              "properties": {
                "children": {
                  "items": [
                    {
                      "$ref": "#/definitions/Node",
                    },
                  ],
                  "type": "array",
                },
                "name": {
                  "enum": [
                    "span",
                  ],
                  "type": "string",
                },
              },
              "required": [
                "name",
                "children",
              ],
              "title": "SpanNode",
              "type": "object",
            },
          ],
          "title": "SpanNodeList",
          "type": "array",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "children",
      ],
      "title": "Node",
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type immediately self-referencing record 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/SelfReferencingRecord",
    },
  ],
  "definitions": {
    "SelfReferencingRecord": {
      "properties": {
        "name": {
          "type": "string",
        },
        "self": {
          "$ref": "#/definitions/SelfReferencingRecord",
        },
      },
      "required": [
        "name",
      ],
      "title": "SelfReferencingRecord",
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type simple circular array 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/ArrayType",
    },
  ],
  "definitions": {
    "ArrayType": {
      "items": [
        {
          "type": "string",
        },
        {
          "$ref": "#/definitions/ArrayType",
        },
      ],
      "type": "array",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type simple circular named record 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/Node",
    },
  ],
  "definitions": {
    "Node": {
      "properties": {
        "children": {
          "items": [
            {
              "$ref": "#/definitions/Node",
            },
          ],
          "type": "array",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "children",
      ],
      "title": "Node",
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type simple circular record 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/RecordType",
    },
  ],
  "definitions": {
    "RecordType": {
      "properties": {
        "children": {
          "items": [
            {
              "$ref": "#/definitions/RecordType",
            },
          ],
          "type": "array",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "children",
      ],
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with dicts 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/RecordType",
    },
  ],
  "definitions": {
    "RecordType": {
      "properties": {
        "children": {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/RecordType",
              },
            ],
          },
          "type": "object",
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
        "children",
      ],
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with direct dicts 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/Dictionary",
    },
  ],
  "definitions": {
    "Dictionary": {
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/Dictionary",
          },
          {
            "type": "string",
          },
        ],
      },
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with direct tuples 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/Tuple",
    },
  ],
  "definitions": {
    "Tuple": {
      "items": [
        {
          "$ref": "#/definitions/Tuple",
        },
        {
          "type": "string",
        },
      ],
      "maxItems": 2,
      "minItems": 2,
      "required": [
        "0",
        "1",
      ],
      "type": "array",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with direct unions 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/OneOf",
    },
  ],
  "definitions": {
    "OneOf": {
      "anyOf": [
        {
          "$ref": "#/definitions/OneOf",
        },
        {
          "type": "string",
        },
      ],
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with intersections 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/RecordType",
    },
  ],
  "definitions": {
    "RecordType": {
      "properties": {
        "children": {
          "allOf": [
            {
              "$ref": "#/definitions/RecordType",
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                },
              },
              "required": [
                "type",
              ],
              "type": "object",
            },
          ],
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
      ],
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with tuples 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/RecordType",
    },
  ],
  "definitions": {
    "RecordType": {
      "properties": {
        "children": {
          "anyOf": [
            {
              "items": [
                {
                  "$ref": "#/definitions/RecordType",
                },
              ],
              "maxItems": 1,
              "minItems": 1,
              "required": [
                "0",
              ],
              "type": "array",
            },
            {
              "items": [
                {
                  "$ref": "#/definitions/RecordType",
                },
                {
                  "$ref": "#/definitions/RecordType",
                },
              ],
              "maxItems": 2,
              "minItems": 2,
              "required": [
                "0",
                "1",
              ],
              "type": "array",
            },
            {
              "items": [
                {
                  "$ref": "#/definitions/RecordType",
                },
                {
                  "$ref": "#/definitions/RecordType",
                },
                {
                  "$ref": "#/definitions/RecordType",
                },
              ],
              "maxItems": 3,
              "minItems": 3,
              "required": [
                "0",
                "1",
                "2",
              ],
              "type": "array",
            },
          ],
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
      ],
      "type": "object",
    },
  },
}
`;

exports[`toJsonSchema should work correctly with circular type works with unions 1`] = `
{
  "allOf": [
    {
      "$ref": "#/definitions/RecordType",
    },
  ],
  "definitions": {
    "RecordType": {
      "properties": {
        "children": {
          "anyOf": [
            {
              "$ref": "#/definitions/RecordType",
            },
            {
              "properties": {
                "children": {
                  "$ref": "#/definitions/RecordType",
                },
                "name": {
                  "type": "string",
                },
              },
              "required": [
                "name",
                "children",
              ],
              "type": "object",
            },
          ],
        },
        "name": {
          "type": "string",
        },
      },
      "required": [
        "name",
      ],
      "type": "object",
    },
  },
}
`;
