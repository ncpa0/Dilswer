// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`toTsType should correctly add export statements when exporting all should add \`declare\` 1`] = `
"export declare type ArrayType = Array<number>;


export declare type FooList = Array<string>;


export declare type Main = {
  unnamed: ArrayType;
  foo: FooList;
};
"
`;

exports[`toTsType should correctly add export statements when exporting all should not add \`declare\` 1`] = `
"export type ArrayType = Array<number>;


export type FooList = Array<string>;


export type Main = {
  unnamed: ArrayType;
  foo: FooList;
};
"
`;

exports[`toTsType should correctly add export statements when exporting only main should add \`declare\` 1`] = `
"declare type FooList = Array<string>;


declare type Main = {
  foo: FooList;
};

export type { Main };
"
`;

exports[`toTsType should correctly add export statements when exporting only main should not add \`declare\` 1`] = `
"type FooList = Array<string>;


type Main = {
  foo: FooList;
};

export type { Main };
"
`;

exports[`toTsType should correctly add export statements when exporting only named should add \`declare\` 1`] = `
"declare type ArrayType = Array<number>;


export declare type FooList = Array<string>;


export declare type Main = {
  unnamed: ArrayType;
  foo: FooList;
};
"
`;

exports[`toTsType should correctly add export statements when exporting only named should not add \`declare\` 1`] = `
"type ArrayType = Array<number>;


export type FooList = Array<string>;


export type Main = {
  unnamed: ArrayType;
  foo: FooList;
};
"
`;

exports[`toTsType should correctly add external type import statements and export it directly if it's a root type 1`] = `
"import type { IsStringFn } from "./is-string-fn.d.ts";
export type { IsStringFn };
"
`;

exports[`toTsType should correctly add external type import statements with regular Custom validator 1`] = `
"import type { CustomFoo } from "./custom-validator.d.ts";

export type RecordType = {
  foo: CustomFoo;
};
"
`;

exports[`toTsType should correctly add external type import statements with regular Enum 1`] = `
"import type { MyEnum } from "./enum.d.ts";

export type RecordType = {
  foo: MyEnum;
};
"
`;

exports[`toTsType should correctly add external type import statements with regular Enum Member 1`] = `
"import type { MyEnum } from "./enum.d.ts";

export type RecordType = {
  foo: MyEnum.C;
};
"
`;

exports[`toTsType should correctly add external type import statements with regular Function as a type 1`] = `
"import type { MyFunction } from "./my-function.d.ts";

export type RecordType = {
  foo: MyFunction;
};
"
`;

exports[`toTsType should correctly add external type import statements with regular Function as a value 1`] = `
"import type { myFunction } from "./my-function.d.ts";

export type RecordType = {
  foo: typeof myFunction;
};
"
`;

exports[`toTsType should correctly generate a complex type with 'compact' mode 1`] = `
"export type TestRecord = {
  /**
   * User unique identifier
   */
  uuid: string;
  number: number;
  bool: boolean;
  stringSet: Set<string>;
  stringArray: Array<string>;
  /**
   * Array of two possible record types
   */
  unionArray: Array<{
    foo: string;
  } | {
    bar: string;
  }>;
  tuple: [string, number];
  /**
   * A tuple with a named type
   */
  namedTuple: [Array<string>, Enum];
  literalString: "literal";
  literalNumber: 1;
  literalBoolean: true;
  enum: Enum;
  bMember: Enum.B;
  recordIntersection: {
    a: string;
  } & {
    b: number;
  };
  dict: Record<string | number, string>;
  oneof: {
    foo: string;
  } | {
    bar: string;
  };
  symbol: symbol;
  undef: undefined;
  customValidator: unknown;
  stringMatching: string;
  namedStringMatching: '\\'foo\\'.\${string}';
  /**
   * A record identical to the parent record, but with all fields optional
   */
  optionalSelfCopy?: {
    id?: string;
    number?: number;
    bool?: boolean;
    stringSet?: Set<string>;
    stringArray?: Array<string>;
    unionArray?: Array<{
      foo: string;
    } | {
      bar: string;
    }>;
    tuple?: [string, number];
    literalString?: "literal";
    literalNumber?: 1;
    literalBoolean?: true;
    enum?: Enum;
    bMember?: Enum.B;
    recordIntersection?: {
      a: string;
    } & {
      b: number;
    };
    dict?: Record<string | number, string>;
    oneof?: {
      foo: string;
    } | {
      bar: string;
    };
  };
};
"
`;

exports[`toTsType should correctly generate a complex type with 'fully-expanded' mode 1`] = `
"type SetType = Set<string>;


type ArrayType = Array<string>;


type RecordType = {
  foo: string;
};


type RecordType1 = {
  bar: string;
};

/**
 * Array of two possible record types
 */
type ArrayType1 = Array<RecordType | RecordType1>;


type Tuple = [string, number];


type ArrayType2 = Array<string>;

/**
 * A tuple with a named type
 */
type ATuple = [ArrayType2, Enum];


type RecordType2 = {
  a: string;
};


type RecordType3 = {
  b: number;
};


type Intersection = RecordType2 & RecordType3;


type Dict = Record<string | number, string>


type FooContainer = {
  foo: string;
};


type BarContainer = {
  bar: string;
};


type Union = FooContainer | BarContainer;


type StringMatching = string;


type FooMatcher = '\\'foo\\'.\${string}';


type SetType1 = Set<string>;


type ArrayType3 = Array<string>;


type FooContainer = {
  foo: string;
};


type RecordType4 = {
  bar: string;
};


type ArrayType4 = Array<FooContainer | RecordType4>;


type Tuple1 = [string, number];


type RecordType5 = {
  a: string;
};


type RecordType6 = {
  b: number;
};


type SomeIntersection = RecordType5 & RecordType6;


type Dict1 = Record<string | number, string>


type RecordType7 = {
  foo: string;
};


type RecordType8 = {
  bar: string;
};


type Union1 = RecordType7 | RecordType8;

/**
 * A record identical to the parent record, but with all fields optional
 */
type OptionalTestRecord = {
  id?: string;
  number?: number;
  bool?: boolean;
  stringSet?: SetType1;
  stringArray?: ArrayType3;
  unionArray?: ArrayType4;
  tuple?: Tuple1;
  literalString?: "literal";
  literalNumber?: 1;
  literalBoolean?: true;
  enum?: Enum;
  bMember?: Enum.B;
  recordIntersection?: SomeIntersection;
  dict?: Dict1;
  oneof?: Union1;
};


type TestRecord = {
  /**
   * User unique identifier
   */
  uuid: string;
  number: number;
  bool: boolean;
  stringSet: SetType;
  stringArray: ArrayType;
  /**
   * Array of two possible record types
   */
  unionArray: ArrayType1;
  tuple: Tuple;
  /**
   * A tuple with a named type
   */
  namedTuple: ATuple;
  literalString: "literal";
  literalNumber: 1;
  literalBoolean: true;
  enum: Enum;
  bMember: Enum.B;
  recordIntersection: Intersection;
  dict: Dict;
  oneof: Union;
  symbol: symbol;
  undef: undefined;
  customValidator: unknown;
  stringMatching: StringMatching;
  namedStringMatching: FooMatcher;
  /**
   * A record identical to the parent record, but with all fields optional
   */
  optionalSelfCopy?: OptionalTestRecord;
};

export type { TestRecord };
"
`;

exports[`toTsType should correctly generate a complex type with 'named-expanded' mode 1`] = `
"/**
 * A tuple with a named type
 */
type ATuple = [Array<string>, Enum];


type FooContainer = {
  foo: string;
};


type BarContainer = {
  bar: string;
};


type FooMatcher = '\\'foo\\'.\${string}';


type FooContainer = {
  foo: string;
};


type SomeIntersection = {
  a: string;
} & {
  b: number;
};

/**
 * A record identical to the parent record, but with all fields optional
 */
type OptionalTestRecord = {
  id?: string;
  number?: number;
  bool?: boolean;
  stringSet?: Set<string>;
  stringArray?: Array<string>;
  unionArray?: Array<FooContainer | {
    bar: string;
  }>;
  tuple?: [string, number];
  literalString?: "literal";
  literalNumber?: 1;
  literalBoolean?: true;
  enum?: Enum;
  bMember?: Enum.B;
  recordIntersection?: SomeIntersection;
  dict?: Record<string | number, string>;
  oneof?: {
    foo: string;
  } | {
    bar: string;
  };
};


type TestRecord = {
  /**
   * User unique identifier
   */
  uuid: string;
  number: number;
  bool: boolean;
  stringSet: Set<string>;
  stringArray: Array<string>;
  /**
   * Array of two possible record types
   */
  unionArray: Array<{
    foo: string;
  } | {
    bar: string;
  }>;
  tuple: [string, number];
  /**
   * A tuple with a named type
   */
  namedTuple: ATuple;
  literalString: "literal";
  literalNumber: 1;
  literalBoolean: true;
  enum: Enum;
  bMember: Enum.B;
  recordIntersection: {
    a: string;
  } & {
    b: number;
  };
  dict: Record<string | number, string>;
  oneof: FooContainer | BarContainer;
  symbol: symbol;
  undef: undefined;
  customValidator: unknown;
  stringMatching: string;
  namedStringMatching: FooMatcher;
  /**
   * A record identical to the parent record, but with all fields optional
   */
  optionalSelfCopy?: OptionalTestRecord;
};

export type { TestRecord };
"
`;

exports[`toTsType should correctly generate a type referencing a class in compact mode with global FooBar 1`] = `
"export type RecordType = {
  foobar: InstanceType<typeof FooBar>;
};
"
`;

exports[`toTsType should correctly generate a type referencing a class in compact mode with imported FooBar 1`] = `
"import type { FooBar } from "./foo-bar";

export type RecordType = {
  foobar: InstanceType<typeof FooBar>;
};
"
`;

exports[`toTsType should correctly generate a type referencing a class in fully-expanded mode with global FooBar 1`] = `
"type ClassInstance = InstanceType<typeof FooBar>


type RecordType = {
  foobar: ClassInstance;
};

export type { RecordType };
"
`;

exports[`toTsType should correctly generate a type referencing a class in fully-expanded mode with global FooBar 2`] = `
"type AliasFooBar = InstanceType<typeof FooBar>


export type RecordType = {
  foobar: AliasFooBar;
};
"
`;

exports[`toTsType should correctly generate a type referencing a class in fully-expanded mode with imported FooBar 1`] = `
"import type { FooBar } from "./foo-bar";

type ClassInstance = InstanceType<typeof FooBar>


type RecordType = {
  foobar: ClassInstance;
};

export type { RecordType };
"
`;

exports[`toTsType should correctly generate a type referencing a class in fully-expanded mode with imported FooBar 2`] = `
"import type { FooBar } from "./foo-bar";

type AliasFooBar = InstanceType<typeof FooBar>


export type RecordType = {
  foobar: AliasFooBar;
};
"
`;

exports[`toTsType should work correctly with circular type deeply nested circular types 1`] = `
"type ArrayType = Array<RecordType | {
  nested: true;
  items: ArrayType;
}>;


type RecordType = {
  name: string;
  children: ArrayType;
};

export type { RecordType };
"
`;

exports[`toTsType should work correctly with circular type deeply nested structure 1`] = `
"type Node = {
  name: string;
  children: {
    type: string;
    container: {
      name: string;
      children: Array<Node>;
    };
  };
};

export type { Node };
"
`;

exports[`toTsType should work correctly with circular type deeply nested structure of named types 1`] = `
"type SpanNode = {
  name: "span";
  children: Array<Node>;
};


type SpanNodeList = Array<SpanNode>;


type Node = {
  name: string;
  children: SpanNodeList;
};

export type { Node };
"
`;

exports[`toTsType should work correctly with circular type immediately self-referencing record 1`] = `
"type SelfReferencingRecord = {
  name: string;
  self?: SelfReferencingRecord;
};

export type { SelfReferencingRecord };
"
`;

exports[`toTsType should work correctly with circular type simple circular array 1`] = `
"type ArrayType = Array<string | ArrayType>;

export type { ArrayType };
"
`;

exports[`toTsType should work correctly with circular type simple circular named record 1`] = `
"type Node = {
  name: string;
  children: Array<Node>;
};

export type { Node };
"
`;

exports[`toTsType should work correctly with circular type simple circular record 1`] = `
"type RecordType = {
  name: string;
  children: Array<RecordType>;
};

export type { RecordType };
"
`;

exports[`toTsType should work correctly with circular type works with dicts 1`] = `
"type RecordType = {
  name: string;
  children: Record<string | number, RecordType>;
};

export type { RecordType };
"
`;

exports[`toTsType should work correctly with circular type works with direct dicts 1`] = `
"type Dictionary = Record<string | number, Dictionary | string>

export type { Dictionary };
"
`;

exports[`toTsType should work correctly with circular type works with direct sets 1`] = `
"type SetType = Set<SetType | string>;

export type { SetType };
"
`;

exports[`toTsType should work correctly with circular type works with direct tuples 1`] = `
"type Tuple = [Tuple, string];

export type { Tuple };
"
`;

exports[`toTsType should work correctly with circular type works with direct unions 1`] = `
"type OneOf = OneOf | string;

export type { OneOf };
"
`;

exports[`toTsType should work correctly with circular type works with intersections 1`] = `
"type RecordType = {
  name: string;
  children?: RecordType & {
    type: string;
  };
};

export type { RecordType };
"
`;

exports[`toTsType should work correctly with circular type works with sets 1`] = `
"type RecordType = {
  name: string;
  children: Set<RecordType>;
};

export type { RecordType };
"
`;

exports[`toTsType should work correctly with circular type works with tuples 1`] = `
"type RecordType = {
  name: string;
  children?: [RecordType] | [RecordType, RecordType] | [RecordType, RecordType, RecordType];
};

export type { RecordType };
"
`;

exports[`toTsType should work correctly with circular type works with unions 1`] = `
"type RecordType = {
  name: string;
  children?: RecordType | {
    name: string;
    children: RecordType;
  };
};

export type { RecordType };
"
`;
